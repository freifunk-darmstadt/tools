#!/usr/bin/env python3
__author__ = 'andi'
import argparse
import sys
import os
import re
import subprocess


def file_contains(fh, line):
    if line in fh.read():
        return True
    return False

def search_key(key, dir='.'):
    for file in os.listdir(dir):
        if os.path.isdir(dir):
            continue
        with open(file, 'r') as fh:
            if file_contains(fh, line):
                yield file

def search_name(name, dir='.'):
    for file in os.listdir(dir):
        if name == file:
            yield file


name_exp = '6[34]\d{3,4}-[\S]{2,}'
name_expression = re.compile('^%s' % name_exp)

def add_key(args):
    return _add_key(args.name, args.key)


def _add_key(name, key, mac=None):
    files = list(search_key(key))

    if len(files) > 0:
        print('Key already exists in files:', file=sys.stderr)
        for file in files:
            print('\t - {}'.format(file), file=sys.stderr)
        return 1

    files = list(search_name(name))
    if len(files) > 0:
        print('Key file already exists:', file=sys.stderr)
        for file in files:
            print('\t - {}'.format(file), file=sys.stderr)
        return 1

    if not name_expression.match(name):
        print('Key name is not valid', file=sys.stderr)
        return 1

    with open(name, 'w') as fh:
        if mac is None:
            template = """\
# {name}
key "{key}";
"""
            content = template.format(name=name, key=key)
        else:
            template = """\
# {name}
# {mac}
# key "{key}";
"""
            content = template.format(name=name, mac=mac.strip(), key=key)
        fh.write(content)

    if subprocess.check_call(['git', 'add', name]):
        return 1
    if subprocess.check_call(['git', 'commit', '-m', 'Added {name}'.format(name=name)]):
        return 1

    character = input("Push? [y/N]").lower()

    if character == 'y':
        return subprocess.check_call(['git', 'push'])
    else:
        print('Aborting. Repository left in garbage state.', file=sys.stderr)
        return 1

def aa(args):
    content = None
    if not sys.stdin.isatty():
        content = sys.stdin.read()
    else:
        try:
            print('Please insert the key you received from the user, including heading. (Press Ctrl-D when complete)', file=sys.stderr)
            content = sys.stdin.read()
        except KeyboardInterrupt as e:
            pass

    content = content.strip()

    formats = [
        re.compile(''.join([
            r'#?\s*(?P<name>{})\s*\n'.format(name_exp),
            r'(#(?P<mac>[^\n]*)\n)?',
            r'((key (?P<quote>["\' ]))?(?P<key>[a-z0-9]{64})(\g<quote>;?)?)\n?'
            ]), flags=re.MULTILINE),
    ]

    for format in formats:
        m = format.match(content)
        if m:
            group = m.groupdict()
            _add_key(group['name'], group['key'], mac=group.get('mac', None))
            return 0

    print('Invalid input.', file=sys.stderr)
    return 1


def main():
    parser = argparse.ArgumentParser()
    parser.set_defaults(func=None)


    subparsers = parser.add_subparsers()

    aa_parser = subparsers.add_parser('aa', help='auto add by parsing the supplied input on stdin')
    aa_parser.set_defaults(func=aa)

    add_parser = subparsers.add_parser('add', help='add new key')
    add_parser.set_defaults(func=add_key)
    add_parser.add_argument('name')
    add_parser.add_argument('key')

    args = parser.parse_args()

    if args.func is None:
        parser.print_help()
        return 1

    return args.func(args)


if __name__ == "__main__":
    sys.exit(main())
